{"ast":null,"code":"var _jsxFileName = \"/Users/rojabkhan/Projects/package/audio-player-package/player-app/src/AudioPlayer/PlayBtn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Pause, Play } from \"./Icons\";\nimport { tracks } from \"../data/tracks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayBtn = ({\n  audioRef,\n  progressBarRef,\n  timeProgress,\n  duration,\n  setTimeProgress,\n  currentTrackIndex,\n  setCurrentTrackIndex,\n  setCurrentTrack\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playAnimationRef = useRef();\n  const repeat = useCallback(() => {\n    const currentTime = audioRef.current.currentTime;\n    setTimeProgress(currentTime);\n    if (progressBarRef.current) {\n      progressBarRef.current.value = currentTime;\n      progressBarRef.current.style.setProperty(\"--range-progress\", `${progressBarRef.current.value / duration * 100}%`);\n    }\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  }, [audioRef, duration, progressBarRef, setTimeProgress]);\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  }, [isPlaying, audioRef, repeat]);\n  const togglePlayPause = () => {\n    setIsPlaying(prev => !prev);\n  };\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, audioRef]);\n  useEffect(() => {\n    if (timeProgress === duration) {\n      // setIsPlaying(false);\n      // audioRef.current.currentTime = 0;\n\n      const nextTrackIndex = currentTrackIndex + 1;\n      if (nextTrackIndex < tracks.length) {\n        setCurrentTrackIndex(nextTrackIndex);\n        setCurrentTrack(tracks[nextTrackIndex]);\n      }\n      setCurrentTrackIndex(() => {\n        // eslint-disable-next-line no-unused-expressions\n        currentTrackIndex + 1;\n      });\n      // setIsPlaying(true);\n      audioRef.current.play();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeProgress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ra-play\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlayPause,\n      children: isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(Play, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayBtn, \"u1pXp1maHSydCQv5r+x6wfAtBQM=\");\n_c = PlayBtn;\nexport default PlayBtn;\nvar _c;\n$RefreshReg$(_c, \"PlayBtn\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Pause","Play","tracks","jsxDEV","_jsxDEV","PlayBtn","audioRef","progressBarRef","timeProgress","duration","setTimeProgress","currentTrackIndex","setCurrentTrackIndex","setCurrentTrack","_s","isPlaying","setIsPlaying","playAnimationRef","repeat","currentTime","current","value","style","setProperty","requestAnimationFrame","play","pause","togglePlayPause","prev","nextTrackIndex","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rojabkhan/Projects/package/audio-player-package/player-app/src/AudioPlayer/PlayBtn.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Pause, Play } from \"./Icons\";\nimport { tracks } from \"../data/tracks\";\n\nconst PlayBtn = ({\n  audioRef,\n  progressBarRef,\n  timeProgress,\n  duration,\n  setTimeProgress,\n  currentTrackIndex,\n  setCurrentTrackIndex,\n  setCurrentTrack,\n}) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playAnimationRef = useRef();\n\n  const repeat = useCallback(() => {\n    const currentTime = audioRef.current.currentTime;\n    setTimeProgress(currentTime);\n    if (progressBarRef.current) {\n      progressBarRef.current.value = currentTime;\n      progressBarRef.current.style.setProperty(\n        \"--range-progress\",\n        `${(progressBarRef.current.value / duration) * 100}%`\n      );\n    }\n\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  }, [audioRef, duration, progressBarRef, setTimeProgress]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  }, [isPlaying, audioRef, repeat]);\n\n  const togglePlayPause = () => {\n    setIsPlaying((prev) => !prev);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, audioRef]);\n\n  useEffect(() => {\n    if (timeProgress === duration) {\n      // setIsPlaying(false);\n      // audioRef.current.currentTime = 0;\n\n      const nextTrackIndex = currentTrackIndex + 1;\n      if (nextTrackIndex < tracks.length) {\n        setCurrentTrackIndex(nextTrackIndex);\n        setCurrentTrack(tracks[nextTrackIndex]);\n      }\n      setCurrentTrackIndex(() => {\n        // eslint-disable-next-line no-unused-expressions\n        currentTrackIndex + 1;\n      });\n      // setIsPlaying(true);\n      audioRef.current.play();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeProgress]);\n\n  return (\n    <div className=\"ra-play\">\n      <button onClick={togglePlayPause}>\n        {isPlaying ? <Pause /> : <Play />}\n      </button>\n    </div>\n  );\n};\n\nexport default PlayBtn;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}